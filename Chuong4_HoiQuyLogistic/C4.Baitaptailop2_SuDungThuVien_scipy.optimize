{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyORF/U9J8REOYuPCmvVf1dj"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **X√¢y d·ª±ng t√†i li·ªáu m√¥ t·∫£ To√°n h·ªçc cho m√¥ h√¨nh h·ªìi quy Logistic**\n","\n","G·ª£i √Ω: Tham kh·∫£o slide b√†i gi·∫£ng c·ªßa Andrew Ng\n","\n","Y√™u c·∫ßu: vi·∫øt b·∫±ng word xu·∫•t ra file pdf. G·ª≠i 2 file word v√† pdf v√†o ph·∫ßn tr·∫£ l·ªùi b√†i t·∫≠p\n","\n","> -\tThay th·∫ø thu·∫≠t to√°n t·ªëi ∆∞u kh√°c m√† scipy cung c·∫•p"],"metadata":{"id":"NfympguU5ZSy"}},{"cell_type":"markdown","source":["Thay v√¨ √°p d·ª•ng thu·∫≠t to√°n Gradient Descent, scipy cung c·∫•p nhi·ªÅu thu·∫≠t\n","to√°n t·ªëi ∆∞u (vd: TNC, BFGS, L-BFGS-B, .v.v.). C√∫ ph√°p s·ª≠ d·ª•ng chung\n","nh∆∞ sau:\n","\n","\"\"\"\n","\n","\n","> from **scipy** import **optimize**\n","\n","> result = optimize.minimize(**fun**=loss, **x0**=w, **args**=(X,y), **method**='L-BFGS-B', **options**={\"maxiter\":n_iters})\n","\n","> **return** result.x, result.fun\"\n","\n","\"\"\"\n","\n","  - fun=loss: ghi t√™n c·ªßa h√†m m·∫•t m√°t l√† h√†m c·∫ßn t·ªëi thi·ªÉu h√≥a gi√° tr·ªã\n","  - x0=w: vector tr·ªçng s·ªë w\n","  - args=(X,y): t·∫≠p d·ªØ li·ªáu X v√† vecgtor nh√£n l·ªõp y\n","  - method=‚ÄôBFGS‚Äô: ghi t√™n thu·∫≠t to√°n t·ªëi ∆∞u ƒë∆∞·ª£c s·ª≠ d·ª•ng\n","  - options={‚Äúmaxiter‚Äù:n_iters}: t·∫°o dictionary khai b√°o s·ªë b∆∞·ªõc l·∫∑p\n","t·ªëi ƒëa l√† n_iters.\n","  - result.x: ch·ª©a vector tr·ªçng s·ªë t·ªëi ∆∞u w‚àó\n","  - result.fun: ch·ª©a gi√° tr·ªã c·ªßa h√†m m·∫•t m√°t t∆∞∆°ng ·ª©ng v·ªõi tr·ªçng s·ªë t·ªëi\n","∆∞u - J(w‚àó)\n","\n","**Ghi ch√∫:** th·ª© t·ª± c√°c tham s·ªë c·ªßa h√†m loss do c√°c b·∫°n l·∫≠p tr√¨nh c≈©ng ph·∫£i\n","ƒë∆∞·ª£c thay ƒë·ªïi tu√¢n theo th·ª© t·ª± xu·∫•t hi·ªán c√°c tham s·ªë trong h√†m optimize\n","n√†y, nh∆∞ sau:\n","def  loss(w, X, y):\n","\n"],"metadata":{"id":"5lFvP4RdI5uG"}},{"cell_type":"code","source":["# C√°c th∆∞ vi·ªán\n","import numpy as np\n","import os\n","from scipy import optimize\n","from matplotlib import pyplot as plt"],"metadata":{"id":"fkLuwDZZ5Yfc","executionInfo":{"status":"ok","timestamp":1666970566670,"user_tz":-420,"elapsed":1196,"user":{"displayName":"Ho√†ng N·ªØ Thu Ph∆∞∆°ng","userId":"06191258665223509744"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["# K·∫øt n·ªëi v·ªõi drive \n","from google.colab import drive\n","drive.mount('/content/gdrive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v99V0SQfHkdG","executionInfo":{"status":"ok","timestamp":1666970570878,"user_tz":-420,"elapsed":3620,"user":{"displayName":"Ho√†ng N·ªØ Thu Ph∆∞∆°ng","userId":"06191258665223509744"}},"outputId":"cac4d891-51a8-474c-bac7-e756b4f9fecb"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"]}]},{"cell_type":"markdown","source":["# **Ch∆∞∆°ng tr√¨nh h·ªìi quy Logistic ho√†n ch·ªânh**\n","-\tMean normalization\n","-\tMax-Min normalization\n","-\tThay th·∫ø thu·∫≠t to√°n t·ªëi ∆∞u kh√°c m√† scipy cung c·∫•p\n"],"metadata":{"id":"IeWb4VGfumAt"}},{"cell_type":"code","source":["def readData(filePath: str, filename: str):\n","    data = np.loadtxt(os.path.join(filePath, filename), delimiter = ',')\n","    X = data[:,:-1]\n","    y = data[:, -1]\n","    m = X.shape[0]\n","    n = X.shape[1]\n","    X = np.reshape(X, (m,n))\n","    y = np.reshape(y, (m,1))\n","    # T·∫°o vector (ma tr·∫≠n ùëö √ó 1) ch·ª©a c√°c s·ªë 1\n","    x0 = np.ones((m,1))\n","    # Th√™m c·ªôt x0 v√†o b√™n tr√°i ma tr·∫≠n X\n","    X = np.column_stack([x0, X])\n","    return X, y"],"metadata":{"id":"GhjxW0Gjuvdk","executionInfo":{"status":"ok","timestamp":1666969362329,"user_tz":-420,"elapsed":10,"user":{"displayName":"Ho√†ng N·ªØ Thu Ph∆∞∆°ng","userId":"06191258665223509744"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["def sigmoid(X, w):\n","    result = 1/(1 + np.exp(-np.dot(X, w)))\n","    return result"],"metadata":{"id":"fftltwj6uzM2","executionInfo":{"status":"ok","timestamp":1666969365546,"user_tz":-420,"elapsed":3226,"user":{"displayName":"Ho√†ng N·ªØ Thu Ph∆∞∆°ng","userId":"06191258665223509744"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["#H√†m m·∫•t m√°t J(w) ph·∫£i ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa h√†m minimize c·ªßa scipy\n","#Th·ª© t·ª± xu·∫•t hi·ªán c·ªßa c√°c tham s·ªë ƒë∆∞·ª£cƒë·ªïi l·∫°i l√† w, X, y\n","def loss(w, X, y):\n","    m = X.shape[0]\n","    #S·ª≠ d·ª•ng bi·∫øn t·∫°m h ƒë·ªÉ gi·∫£m s·ªë l·∫ßn g·ªçi h√†m sigmoid\n","    h = sigmoid(X, w)\n","    result = (-1 / m) * np.sum(np.dot(y.T, np.log(h)) + np.dot((1 - y).T, np.log(1 - h)))\n","    return result"],"metadata":{"id":"zbO7elbgu1Il","executionInfo":{"status":"ok","timestamp":1666969365547,"user_tz":-420,"elapsed":11,"user":{"displayName":"Ho√†ng N·ªØ Thu Ph∆∞∆°ng","userId":"06191258665223509744"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["def toi_uu_bang_scipy(X,y,w,n_iters):\n","    #Th·ª© t·ª± xu·∫•t hi·ªán c√°c tham s·ªë c·ªßa h√†m loss ph·∫£i ƒë·ªïi l·∫°i theo th·ª© t·ª± trong optimize.minimize l√†\n","    #loss(w, X, y)\n","    result = optimize.minimize(fun=loss, x0=w, args=(X,y),\n","                               method='L-BFGS-B',\n","                               options={\"maxiter\":n_iters} )\n","    w_optimal = result.x\n","    J_optimal = result.fun\n","    return w_optimal, J_optimal"],"metadata":{"id":"1PXZieUPGrtQ","executionInfo":{"status":"ok","timestamp":1666969365548,"user_tz":-420,"elapsed":11,"user":{"displayName":"Ho√†ng N·ªØ Thu Ph∆∞∆°ng","userId":"06191258665223509744"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["def featureVectorScaling(data):\n","    avg = np.mean(data)\n","    sln = data.max()\n","    snn = data.min()\n","    data_scl = (data - avg)/(sln - snn)\n","    print(data_scl[1])\n","    return data_scl\n"],"metadata":{"id":"z6FEU6NnvHWW","executionInfo":{"status":"ok","timestamp":1666969365548,"user_tz":-420,"elapsed":11,"user":{"displayName":"Ho√†ng N·ªØ Thu Ph∆∞∆°ng","userId":"06191258665223509744"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["def normalizeData(X):\n","    X_scl = X[:, 0]\n","    for i in range(1, X.shape[1]):\n","        scl = featureVectorScaling(X[:, i])\n","        X_scl = np.column_stack([X_scl, scl])\n","    return X_scl\n"],"metadata":{"id":"ejym04wOvKv_","executionInfo":{"status":"ok","timestamp":1666969365549,"user_tz":-420,"elapsed":11,"user":{"displayName":"Ho√†ng N·ªØ Thu Ph∆∞∆°ng","userId":"06191258665223509744"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# M√¥ t·∫£ d·ªØ li·ªáu b·∫±ng plot \n","def visualizeDataAndModel(X, y, w_optimal):\n","    fig = plt.figure()\n","    plt.plot(X[:,1], y, 'g^')\n","    plt.plot(X[:, 1], np.dot(X, w_optimal), 'r-')\n","    plt.legend(['Raw Data', 'Linear regression'])\n","    plt.ylabel('Profit in $10,000')\n","    plt.xlabel('Population of City in 10,000s')\n","    plt.show()"],"metadata":{"id":"Gdku_iMGznlp","executionInfo":{"status":"ok","timestamp":1666969387881,"user_tz":-420,"elapsed":6,"user":{"displayName":"Ho√†ng N·ªØ Thu Ph∆∞∆°ng","userId":"06191258665223509744"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["def main():\n","    X, y = readData('/content/gdrive/MyDrive/Classroom/HoÃ£c maÃÅy 1 PhaÃÇÃÄn coÃõ soÃõÃâ', 'ex2data1.txt')\n","    X = normalizeData(X)\n","    n = X.shape[1]\n","    #L∆∞u √Ω: w trong thu·∫≠t to√°n c·ªßa scipy l√† vector h√†ng t∆∞∆°ng ·ª©ng 1d-array trong numpy\n","    w = np.zeros(n)\n","    n_iters = 2000\n","    w_opt, J_opt = toi_uu_bang_scipy(X,y,w, n_iters)\n","    print(\"Ket qua la: \")\n","    print('\\tTrong so w toi uu la: ', w_opt)\n","    print('\\tGia tri Loss toi uu: ', J_opt)\n","    visualizeDataAndModel(X, y, w)\n","\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":366},"id":"Bb7RMoOXvLKQ","executionInfo":{"status":"ok","timestamp":1666969669616,"user_tz":-420,"elapsed":9,"user":{"displayName":"Ho√†ng N·ªØ Thu Ph∆∞∆°ng","userId":"06191258665223509744"}},"outputId":"13dab607-df79-4681-c2b5-a0ec97a1dfe4"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["-0.5067801656080071\n","-0.3270580397857178\n","Ket qua la: \n","\tTrong so w toi uu la:  [ 1.71841797 14.38833747 13.75343322]\n","\tGia tri Loss toi uu:  0.2034977016212829\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}